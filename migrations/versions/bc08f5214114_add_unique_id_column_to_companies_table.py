"""Add unique_id column to companies table

Revision ID: bc08f5214114
Revises: 0a28e6e08743
Create Date: 2025-07-23 03:26:40.799485

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bc08f5214114'
down_revision = '0a28e6e08743'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('feedback_heatmap')
    op.drop_table('business_milestones')
    op.drop_table('debt_tracker')
    op.drop_table('team_voting')
    op.drop_table('price_recommendations')
    op.drop_table('notification_templates')
    op.drop_table('voice_notes')
    op.drop_table('generated_documents')
    op.drop_table('business_metrics')
    op.drop_table('subscriptions')
    op.drop_table('communications')
    op.drop_table('founder_metrics')
    op.drop_table('qr_invoices')
    op.drop_table('audit_logs')
    op.drop_table('ai_insights')
    op.drop_table('payroll_automation')
    op.drop_table('company_feedback')
    op.drop_table('system_alerts')
    op.drop_table('document_templates')
    op.drop_table('payment_verifications')
    op.drop_table('micro_investors')
    with op.batch_alter_table('companies', schema=None) as batch_op:
        # Add unique_id column as nullable first
        batch_op.add_column(sa.Column('unique_id', sa.String(length=6), nullable=True))
        batch_op.add_column(sa.Column('city', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('state', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('country', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('postal_code', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
    
    # Populate unique_id values for existing companies
    import random
    import string
    
    connection = op.get_bind()
    result = connection.execute(sa.text("SELECT id FROM companies WHERE unique_id IS NULL"))
    companies = result.fetchall()
    
    for company in companies:
        # Generate unique ID similar to Company.generate_unique_id()
        while True:
            letters1 = ''.join(random.choices(string.ascii_uppercase, k=3))
            digits = ''.join(random.choices(string.digits, k=2))
            letter2 = random.choice(string.ascii_uppercase)
            unique_id = letters1 + digits + letter2
            
            # Check if this ID already exists
            existing = connection.execute(sa.text("SELECT id FROM companies WHERE unique_id = :uid"), {"uid": unique_id}).fetchone()
            if not existing:
                connection.execute(sa.text("UPDATE companies SET unique_id = :uid WHERE id = :id"), 
                                 {"uid": unique_id, "id": company[0]})
                break
    
    # Now make unique_id non-nullable and add unique constraint
    with op.batch_alter_table('companies', schema=None) as batch_op:
        batch_op.alter_column('unique_id', nullable=False)
        batch_op.create_unique_constraint(None, ['unique_id'])
        batch_op.drop_column('tax_number')
        batch_op.drop_column('status')
        batch_op.drop_column('blacklisted_by')
        batch_op.drop_column('employee_count')
        batch_op.drop_column('blacklisted_at')
        batch_op.drop_column('is_verified')
        batch_op.drop_column('subscription_plan')
        batch_op.drop_column('meeting_room_enabled')
        batch_op.drop_column('annual_revenue')
        batch_op.drop_column('verification_date')
        batch_op.drop_column('currency')
        batch_op.drop_column('registration_number')
        batch_op.drop_column('date_format')
        batch_op.drop_column('logo_filename')
        batch_op.drop_column('subscription_status')
        batch_op.drop_column('business_type')
        batch_op.drop_column('trial_end_date')
        batch_op.drop_column('timezone')
        batch_op.drop_column('next_billing_date')
        batch_op.drop_column('meeting_room_id')
        batch_op.drop_column('blacklist_reason')

    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.add_column(sa.Column('brand', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('supplier', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('reorder_level', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('max_stock_level', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('location', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('barcode', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('weight', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('dimensions', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('tax_rate', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True))
        batch_op.add_column(sa.Column('last_restocked', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('expiry_date', sa.Date(), nullable=True))
        batch_op.create_unique_constraint(None, ['barcode'])

    with op.batch_alter_table('sale', schema=None) as batch_op:
        batch_op.add_column(sa.Column('total_amount', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('date_created', sa.DateTime(), server_default=sa.text('now()'), nullable=True))
        batch_op.add_column(sa.Column('customer_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('company_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'customers', ['customer_id'], ['id'])
        batch_op.create_foreign_key(None, 'companies', ['company_id'], ['id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('two_factor_enabled')
        batch_op.drop_column('last_login')
        batch_op.drop_column('locked_until')
        batch_op.drop_column('two_factor_secret')
        batch_op.drop_column('password_changed_at')
        batch_op.drop_column('is_active')
        batch_op.drop_column('login_attempts')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('login_attempts', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('password_changed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('two_factor_secret', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('locked_until', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('two_factor_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True))

    with op.batch_alter_table('sale', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('company_id')
        batch_op.drop_column('customer_id')
        batch_op.drop_column('date_created')
        batch_op.drop_column('total_amount')

    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('expiry_date')
        batch_op.drop_column('last_restocked')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('tax_rate')
        batch_op.drop_column('is_active')
        batch_op.drop_column('dimensions')
        batch_op.drop_column('weight')
        batch_op.drop_column('barcode')
        batch_op.drop_column('location')
        batch_op.drop_column('max_stock_level')
        batch_op.drop_column('reorder_level')
        batch_op.drop_column('supplier')
        batch_op.drop_column('brand')

    with op.batch_alter_table('companies', schema=None) as batch_op:
        batch_op.add_column(sa.Column('blacklist_reason', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('meeting_room_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('next_billing_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('timezone', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('trial_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('business_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('subscription_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('logo_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('date_format', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('registration_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('currency', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('verification_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('annual_revenue', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('meeting_room_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('subscription_plan', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('blacklisted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('employee_count', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('blacklisted_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('tax_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('description')
        batch_op.drop_column('postal_code')
        batch_op.drop_column('country')
        batch_op.drop_column('state')
        batch_op.drop_column('city')
        batch_op.drop_column('unique_id')

    op.create_table('micro_investors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('investor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('shares_owned', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('share_price_at_purchase', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('total_invested', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('investment_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('minimum_investment', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('expected_return_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('voting_rights', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('voting_power_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dividends_received', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('current_valuation', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('return_on_investment', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('investment_agreement_signed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('agreement_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('first_investment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('last_transaction_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('micro_investors_company_id_fkey')),
    sa.ForeignKeyConstraint(['investor_id'], ['users.id'], name=op.f('micro_investors_investor_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('micro_investors_pkey'))
    )
    op.create_table('payment_verifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('transaction_id', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('mpesa_receipt_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('mpesa_phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('mpesa_transaction_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('paypal_payment_id', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('paypal_payer_id', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('bank_reference', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('bank_account_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('verification_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('verified_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('verified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('webhook_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('purpose', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('reference_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('payment_verifications_company_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('payment_verifications_user_id_fkey')),
    sa.ForeignKeyConstraint(['verified_by'], ['users.id'], name=op.f('payment_verifications_verified_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('payment_verifications_pkey')),
    sa.UniqueConstraint('transaction_id', name=op.f('payment_verifications_transaction_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('document_templates',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('document_templates_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('template_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('template_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('template_content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('ai_variables', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('industry_specific', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='document_templates_company_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='document_templates_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_templates_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('system_alerts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('alert_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('threshold_value', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('current_value', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('acknowledged_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('acknowledged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('auto_resolve', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('system_alerts_company_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('system_alerts_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('system_alerts_pkey'))
    )
    op.create_table('company_feedback',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('subject', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('module_affected', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('browser_info', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('screenshot_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('assigned_to', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('founder_response', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('response_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('resolution_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('company_feedback_company_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('company_feedback_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('company_feedback_pkey'))
    )
    op.create_table('payroll_automation',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payroll_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('auto_send_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('require_approval', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('payment_splits', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('total_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('successful_payments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('failed_payments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processing_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], name=op.f('payroll_automation_approved_by_fkey')),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('payroll_automation_company_id_fkey')),
    sa.ForeignKeyConstraint(['payroll_id'], ['payrolls.id'], name=op.f('payroll_automation_payroll_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('payroll_automation_pkey'))
    )
    op.create_table('ai_insights',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('insight_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('recommendation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_source', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('dismissed_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dismissed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('ai_insights_company_id_fkey')),
    sa.ForeignKeyConstraint(['dismissed_by'], ['users.id'], name=op.f('ai_insights_dismissed_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_insights_pkey'))
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('request_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('request_method', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('old_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('audit_logs_company_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('audit_logs_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('audit_logs_pkey'))
    )
    op.create_table('qr_invoices',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invoice_number', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('customer_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('customer_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('customer_email', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('tax_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('mpesa_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('paypal_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('bank_transfer_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('qr_code_data', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('qr_code_image_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('payment_method_used', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('payment_reference', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('paid_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('paid_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('qr_invoices_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('qr_invoices_pkey')),
    sa.UniqueConstraint('invoice_number', name=op.f('qr_invoices_invoice_number_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('founder_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('total_companies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_companies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('suspended_companies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('blacklisted_companies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('new_companies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_users', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_users', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('daily_logins', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_revenue', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('monthly_recurring_revenue', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('daily_revenue', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('trial_subscriptions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('starter_subscriptions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('professional_subscriptions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('enterprise_subscriptions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('most_used_modules', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('average_session_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('founder_metrics_pkey')),
    sa.UniqueConstraint('date', name=op.f('founder_metrics_date_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('communications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('message_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recipient_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('recipient_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subject', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('attachment_urls', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('whatsapp_message_id', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('whatsapp_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('whatsapp_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email_address', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('email_message_id', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('delivery_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('read_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('scheduled_for', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('communications_company_id_fkey')),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name=op.f('communications_sender_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('communications_pkey'))
    )
    op.create_table('subscriptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('plan_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('plan_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('features', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('max_users', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_storage_gb', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('subscriptions_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('subscriptions_pkey'))
    )
    op.create_table('business_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('daily_revenue', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('daily_sales_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('daily_customers', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('average_order_value', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('products_sold', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('low_stock_alerts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('inventory_value', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('active_users', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('login_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('expenses', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('profit_margin', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('business_metrics_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('business_metrics_pkey')),
    sa.UniqueConstraint('company_id', 'date', name=op.f('business_metrics_company_id_date_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('generated_documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('document_content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('variables_used', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_signed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('signature_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('signed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('generated_documents_company_id_fkey')),
    sa.ForeignKeyConstraint(['template_id'], ['document_templates.id'], name=op.f('generated_documents_template_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('generated_documents_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('generated_documents_pkey'))
    )
    op.create_table('voice_notes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('audio_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('transcribed_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('original_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('task_title', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('task_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('converted_to_task', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processing_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ai_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('voice_notes_company_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('voice_notes_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('voice_notes_pkey'))
    )
    op.create_table('notification_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('template_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('channel', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('subject_template', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('message_template', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_system_template', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('notification_templates_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('notification_templates_pkey'))
    )
    op.create_table('price_recommendations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('current_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('cost_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('recommended_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('min_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('max_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('sales_velocity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('profit_margin_current', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('profit_margin_recommended', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('competitor_avg_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('market_demand_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('seasonality_factor', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('recommendation_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('implemented', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('implemented_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sales_before', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sales_after', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('revenue_impact', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('price_recommendations_company_id_fkey')),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('price_recommendations_product_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('price_recommendations_pkey'))
    )
    op.create_table('team_voting',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('voting_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('voting_options', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('eligible_voters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('anonymous_voting', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('min_votes_required', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('results', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('winner_option', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('team_voting_company_id_fkey')),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('team_voting_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('team_voting_pkey'))
    )
    op.create_table('debt_tracker',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invoice_number', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('amount_due', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('original_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('customer_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('customer_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('customer_email', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('reminder_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_reminder_sent', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('next_reminder_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('payments_received', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('escalated_to_legal', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('escalation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('debt_tracker_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('debt_tracker_pkey'))
    )
    op.create_table('business_milestones',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('target_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('current_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('target_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('achieved_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('progress_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('celebration_planned', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('reward_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('business_milestones_company_id_fkey')),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('business_milestones_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('business_milestones_pkey'))
    )
    op.create_table('feedback_heatmap',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('service_area', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('feedback_category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('sentiment_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('emotion_detected', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('customer_location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('region', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('intensity_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('urgency_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('feedback_source', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('feedback_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('customer_segment', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('resolved', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('resolution_time_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('feedback_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('resolved_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('feedback_heatmap_company_id_fkey')),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('feedback_heatmap_product_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('feedback_heatmap_pkey'))
    )
    # ### end Alembic commands ###
